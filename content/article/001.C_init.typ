#import "/typ/templates/blog.typ": *
#let blog-tags = (
  c: "C",
  programming: "Programming",

)
#show: main.with(
  title: "001.C init 初始C教程",
  desc: [C语言学习笔记],
  date: "2025-09-02",
  tags: (
    blog-tags.c,
    blog-tags.programming,
  ),
)
= 0.Perface
用于及时捡起自己学习的编程语言，实现阶段性回顾，本笔记对应了b站的教程：#link("https://www.bilibili.com/video/BV1Vm4y1r7jY/")[C语言程序设计从入门到进阶]的前半段，入门到初阶段除指针，结构体之外的初阶课程。
= 1.C语言初阶教程
== 1.1工具和界面
在本教程中，由于面向初学者，需要介绍基础的术语：
- `IDE`：集成开发环境，用于编写、调试和运行代码。
- `编译器`：将高级语言代码转换为机器语言的程序。
- `调试器`：用于查找和修复代码中的错误。
- `头文件`：包含其他文件所定义的函数和变量的声明。
- `库文件`：包含预编译的代码，用于执行常见任务。
- `源文件`：包含程序的实际代码。
- `目标文件`：包含已编译的代码，用于链接到最终的可执行文件。
- `可执行文件`：包含可以在计算机上运行的代码。
- `函数`：包含可重复使用的代码块。
- `变量`：用于存储数据的容器。
- `常量`：不可改变的值。
- `运算符`：用于执行操作的符号。
- `表达式`：由变量、常量和运算符组成的代码。
- `语句`：包含一个或多个表达式的代码。
- `注释`：用于解释代码的文本。注释可以是单行注释或多行注释。
- `标识符`：用于命名变量、函数和其他实体的名称。
- `关键字`：是C语言中预定义的单词，具有特殊的含义。
- `数据类型`：用于指定变量可以存储的数据类型。
- `变量声明`：用于告诉编译器变量的名称和数据类型。
- `变量初始化`：用于为变量分配初始值。
- `赋值运算符`：用于将值分配给变量。
- `算术运算符`：用于执行算术操作，如加法、减法、乘法和除法。
- `关系运算符`：用于比较两个值，如等于、不等于、大于和小于。
- `逻辑运算符`：用于执行逻辑操作，如与、或和非。
- `条件运算符`：用于根据条件执行不同的操作。
- `注释`：用于解释代码的文本。
我们用的`IDE`是`Visual Studio`，该`IDE`对新手友好，无需配置冗杂环境。涉及另一个进阶工具`Cmake`会在后续笔记中涉及。
== 1.2数据类型
- 
  ```.C
  #include<stdio.h>
  int main()
  {
    printf("%d\n", 100);	//打印整形
    printf("%zu\n", sizeof(char));//字符串占内存1
    printf("%zu\n", sizeof(float));//浮点数4字节
    printf("%zu\n", sizeof(int));//整形4字节
    printf("%zu\n", sizeof(long));//长整型4字节
    printf("%zu\n", sizeof(long long));//长长整形8字节
    printf("%zu\n", sizeof(double));//双浮点数8字节
    printf("%zu\n", sizeof(short));//短整形2字节
    int age = 20;
    double price = 66.66;
    printf("%d\n", age);
    printf("%f\n", price);
    printf("%d\n", 100);
    printf("%d\n", 100);
    printf("%d\n", 100);
    return 0;
  }
  ```
== 1.3变量