---
import type { ArchiveProps } from "..";
import { archiveUrl } from "./url";

interface Props extends ArchiveProps {
  articleId?: string;
}

export const normArchive = ({ id }: { id: string }) => id.startsWith("blog-");

const { articleId, pdfArchives: base, ...rest } = Astro.props;
const pdfArchives = await (async () => {
  return base
    .filter((m) => articleId && m.data.indices?.includes(articleId))
    .sort((a, b) => {
      if (normArchive(a) || normArchive(b)) {
        // Sort archives that are not blog archives to the end
        return normArchive(a) && normArchive(b)
          ? a.id.localeCompare(b.id)
          : normArchive(a)
            ? 1
            : -1;
      }

      return a.id.localeCompare(b.id);
    });
})();
---

{
  pdfArchives.length > 0 && (
    <p {...rest}>
      This article is part of{" "}
      {pdfArchives.map((archive, idx) => (
        <>
          <span>
            {pdfArchives.length === 2 && idx === 1
              ? " and "
              : idx > 0
                ? pdfArchives.length === idx + 1
                  ? ", and "
                  : ", "
                : ""}
          </span>
          <a
            href={archiveUrl(archive.id, import.meta.env.BASE_URL)}
          >{`${archive.data.title}${pdfArchives.length === idx + 1 ? "." : ""}`}</a>
        </>
      ))}
    </p>
  )
}
